/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/classes/flight/flighteventslist.ts":
/*!*********************************************************!*\
  !*** ./resources/js/classes/flight/flighteventslist.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _values_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/constants */ \"./resources/js/values/constants.ts\");\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = undefined && undefined.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\n\n\nvar FlightEventsList =\n/** @class */\nfunction () {\n  function FlightEventsList() {\n    this._flight_events = new Array();\n    this._errno = 0;\n    this._error = null;\n  }\n\n  Object.defineProperty(FlightEventsList.prototype, \"flight_events\", {\n    get: function get() {\n      return this._flight_events;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlightEventsList.prototype, \"html\", {\n    get: function get() {\n      return this._html;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlightEventsList.prototype, \"errno\", {\n    get: function get() {\n      return this._errno;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlightEventsList.prototype, \"error\", {\n    get: function get() {\n      switch (this._errno) {\n        case FlightEventsList.ERR_SCRIPT_EXCEPTION:\n          this._error = FlightEventsList.ERR_SCRIPT_EXCEPTION_MSG;\n          break;\n\n        default:\n          this._error = null;\n          break;\n      }\n\n      return this._error;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FlightEventsList.prototype.flight_events_request = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var ok, fe_list;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ok = false;\n            this._errno = 0;\n            return [4\n            /*yield*/\n            , this.flight_event_request_promise().then(function (res) {\n              //console.log(res);\n              var json = JSON.parse(res);\n              _this._flight_events = json; //console.log(this._flight_events);\n\n              _this.htmlSet();\n\n              ok = true;\n            })[\"catch\"](function (err) {\n              console.warn(err);\n              _this._errno = FlightEventsList.ERR_SCRIPT_EXCEPTION;\n            })];\n\n          case 1:\n            fe_list = _a.sent();\n            return [2\n            /*return*/\n            , ok];\n        }\n      });\n    });\n  };\n\n  FlightEventsList.prototype.flight_event_request_promise = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          fetch(FlightEventsList.SCRIPT_URL).then(function (res) {\n            resolve(res.text());\n          })[\"catch\"](function (err) {\n            reject(err);\n          });\n        })];\n      });\n    });\n  };\n\n  FlightEventsList.prototype.htmlSet = function () {\n    var _this = this;\n\n    var cards = \"\"; //Add cards elements to result\n\n    this._flight_events.forEach(function (val, index) {\n      var fel_elem = {\n        image: _values_constants__WEBPACK_IMPORTED_MODULE_0__.Constants.FOLDER_FLIGHTEVENTS + '/' + val['image'],\n        name: val['name'],\n        location: val['location'],\n        country: val['country'],\n        price: val['price']\n      };\n      cards += _this.htmlCard(fel_elem);\n    });\n\n    this._html = \"\\n<div class=\\\"container-fluid\\\">\\n    <div class=\\\"row\\\">\\n        \".concat(cards, \"\\n    </div>\\n</div>\\n\");\n  };\n\n  FlightEventsList.prototype.htmlCard = function (data) {\n    var htmlCard = \"\\n<div class=\\\"card col-12 col-sm-6 col-md-4 col-lg-3\\\">\\n    <img src=\\\"\".concat(data.image, \"\\\" alt=\\\"\").concat(data.name, \"\\\" title=\\\"\").concat(data.name, \"\\\">\\n    <div class=\\\"card-body\\\">\\n        <h3>\").concat(data.name, \"</h3>\\n        <div class=\\\"card-text d-flex justify-content-between\\\">\\n            <div class=\\\"fs-6\\\">\").concat(data.location, \"</div>\\n            <div class=\\\"fs-6\\\">\").concat(data.country, \"</div>\\n        </div>\\n        <div class=\\\"card-text d-flex justify-content-between\\\">\\n            <div class=\\\"fs-5\\\">\").concat(data.price, \"</div>\\n            <a href=\\\"#\\\" class=\\\"btn btn-warning\\\">Biglietti</a>\\n        </div>\\n    </div>\\n</div>\\n\");\n    return htmlCard;\n  }; //Numbers\n\n\n  FlightEventsList.ERR_SCRIPT_EXCEPTION = 1; //Messages\n\n  FlightEventsList.ERR_SCRIPT_EXCEPTION_MSG = 'Errore durante l\\' esecuzione dello script';\n  FlightEventsList.SCRIPT_URL = _values_constants__WEBPACK_IMPORTED_MODULE_0__.Constants.HOSTNAME + ':' + _values_constants__WEBPACK_IMPORTED_MODULE_0__.Constants.PORT + '/flightevents';\n  return FlightEventsList;\n}();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FlightEventsList);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/classes/flight/flighteventslist.ts\n");

/***/ }),

/***/ "./resources/js/classes/flight/flightlocationlist.ts":
/*!***********************************************************!*\
  !*** ./resources/js/classes/flight/flightlocationlist.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _values_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/constants */ \"./resources/js/values/constants.ts\");\n//This class provides suggestion for flight locations in welcome blade flights tab\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = undefined && undefined.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\n\n\nvar FlightLocationList =\n/** @class */\nfunction () {\n  function FlightLocationList() {\n    this._errno = 0;\n    this._error = null;\n  }\n\n  Object.defineProperty(FlightLocationList.prototype, \"fired\", {\n    get: function get() {\n      return this._fired;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlightLocationList.prototype, \"query\", {\n    get: function get() {\n      return this._query;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlightLocationList.prototype, \"country\", {\n    get: function get() {\n      return this._country;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlightLocationList.prototype, \"id_companies_select\", {\n    get: function get() {\n      return this._id_companies_select;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlightLocationList.prototype, \"id_from_select\", {\n    get: function get() {\n      return this._id_from_select;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlightLocationList.prototype, \"id_to_select\", {\n    get: function get() {\n      return this._id_to_select;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlightLocationList.prototype, \"selects\", {\n    get: function get() {\n      return this._selects;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlightLocationList.prototype, \"errno\", {\n    get: function get() {\n      return this._errno;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlightLocationList.prototype, \"error\", {\n    get: function get() {\n      switch (this._errno) {\n        case FlightLocationList.ERR_FETCH_COUNTRIES:\n          this._error = FlightLocationList.ERR_FETCH_COUNTRIES_MSG;\n          break;\n\n        case FlightLocationList.ERR_FETCH_AIRPORTS:\n          this._error = FlightLocationList.ERR_FETCH_AIRPORTS_MSG;\n          break;\n\n        case FlightLocationList.ERR_FETCH_COMPANIES:\n          this._error = FlightLocationList.ERR_FETCH_COMPANIES_MSG;\n          break;\n\n        default:\n          this._error = null;\n          break;\n      }\n\n      return this._error;\n    },\n    enumerable: false,\n    configurable: true\n  }); //Get airports located in selected country\n\n  FlightLocationList.prototype.get_country_airports = function (data) {\n    var _this = this;\n\n    var ok = false;\n    this._errno = 0;\n    this._country = data.country;\n    if (data.id_from_select !== undefined) this._id_from_select = data.id_from_select;\n    if (data.id_to_select !== undefined) this._id_to_select = data.id_to_select; //If these properties are setted\n\n    this.get_country_airports_promise().then(function (res) {\n      //console.log(res);\n      if (_this._id_from_select) _this.set_airports_select(_this._id_from_select, res);\n      if (_this._id_to_select) _this.set_airports_select(_this._id_to_select, res);\n      ok = true;\n    })[\"catch\"](function (err) {\n      _this._errno = FlightLocationList.ERR_FETCH_AIRPORTS;\n      console.warn(err);\n    });\n    return ok;\n  };\n\n  FlightLocationList.prototype.get_country_airports_promise = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var fetch_url, promise;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            fetch_url = _values_constants__WEBPACK_IMPORTED_MODULE_0__.Constants.URL_AIRPORTSSEARCH + '/?country=' + this._country;\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              fetch(fetch_url).then(function (res) {\n                resolve(res.json());\n              })[\"catch\"](function (err) {\n                reject(err);\n              });\n            })];\n\n          case 1:\n            promise = _a.sent();\n            return [2\n            /*return*/\n            , promise];\n        }\n      });\n    });\n  };\n\n  FlightLocationList.prototype.get_flight_companies = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ok;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ok = false;\n            this._errno = 0;\n            this._id_companies_select = data.id_companies_select;\n            return [4\n            /*yield*/\n            , this.get_flight_companies_promise().then(function (res) {\n              //console.log(res);\n              _this.set_companies_select(res);\n\n              ok = true;\n            })[\"catch\"](function (err) {\n              _this._errno = FlightLocationList.ERR_FETCH_COMPANIES;\n              console.warn(err);\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , ok];\n        }\n      });\n    });\n  };\n\n  FlightLocationList.prototype.get_flight_companies_promise = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var fetch_url, promise;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            fetch_url = _values_constants__WEBPACK_IMPORTED_MODULE_0__.Constants.URL_COMPANIESSEARCH;\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              fetch(fetch_url).then(function (res) {\n                resolve(res.json());\n              })[\"catch\"](function (err) {\n                reject(err);\n              });\n            })];\n\n          case 1:\n            promise = _a.sent();\n            return [2\n            /*return*/\n            , promise];\n        }\n      });\n    });\n  }; //Get available countries list \n\n\n  FlightLocationList.prototype.get_countries = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ok;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ok = false;\n            this._errno = 0;\n            this._id_from_select = data.id_from_select;\n            this._id_to_select = data.id_to_select;\n            return [4\n            /*yield*/\n            , this.get_countries_promise().then(function (res) {\n              /* console.log(\"Countries promise\");\r\n              console.log(res); */\n              _this.set_countries_select(_this._id_from_select, res);\n\n              _this.set_countries_select(_this._id_to_select, res);\n\n              ok = true;\n            })[\"catch\"](function (err) {\n              _this._errno = FlightLocationList.ERR_FETCH_COUNTRIES;\n              console.warn(err);\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , ok];\n        }\n      });\n    });\n  };\n\n  FlightLocationList.prototype.get_countries_promise = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var fetch_url, promise;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            fetch_url = _values_constants__WEBPACK_IMPORTED_MODULE_0__.Constants.URL_FLIGHTSEARCH;\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              fetch(fetch_url).then(function (res) {\n                resolve(res.json());\n              })[\"catch\"](function (err) {\n                reject(err);\n              });\n            })];\n\n          case 1:\n            promise = _a.sent();\n            return [2\n            /*return*/\n            , promise];\n        }\n      });\n    });\n  };\n\n  FlightLocationList.prototype.set_airports_select = function (id, list) {\n    var select = $('#' + id + '-airports');\n    select.html('');\n\n    for (var airport in list) {\n      var option = $('<option>');\n      option.text(airport);\n      option.attr('value', airport);\n      $(select).append(option);\n    }\n  };\n\n  FlightLocationList.prototype.set_companies_select = function (list) {\n    var select = $('#' + this._id_companies_select);\n    select.html('');\n    list.forEach(function (company) {\n      var option = $('<option>');\n      option.text(company);\n      option.attr('value', company);\n      $(select).append(option);\n    });\n  };\n\n  FlightLocationList.prototype.set_countries_select = function (id, list) {\n    //console.log(list);\n    var select = $('#' + id);\n    select.html('');\n    list.forEach(function (country) {\n      /* console.log(\"country\");\r\n      console.log(country); */\n      var option = $('<option>');\n      option.text(country);\n      option.attr('value', country);\n      $(select).append(option);\n    });\n  };\n\n  FlightLocationList.ERR_FETCH_COUNTRIES = 1;\n  FlightLocationList.ERR_FETCH_AIRPORTS = 2;\n  FlightLocationList.ERR_FETCH_COMPANIES = 3;\n  FlightLocationList.ERR_FETCH_COUNTRIES_MSG = \"Errore durante l'esecuzione della richiesta per la lista dei paesi\";\n  FlightLocationList.ERR_FETCH_AIRPORTS_MSG = \"Errore durante l'esecuzione della richiesta per la lista degli aereoporti del paese selezionato\";\n  FlightLocationList.ERR_FETCH_COMPANIES_MSG = \"Errore durante l'esecuzione della richiesta per la lista compagnie aeree\";\n  return FlightLocationList;\n}();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FlightLocationList);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/classes/flight/flightlocationlist.ts\n");

/***/ }),

/***/ "./resources/js/values/constants.ts":
/*!******************************************!*\
  !*** ./resources/js/values/constants.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Constants\": () => (/* binding */ Constants)\n/* harmony export */ });\nvar Constants;\n\n(function (Constants) {\n  Constants.FOLDER_IMG = '/img';\n  Constants.FOLDER_FLIGHTEVENTS = Constants.FOLDER_IMG + '/flightevents';\n  Constants.FOLDER_JSON = '/json';\n  Constants.FOLDER_SCRIPT = '/scripts';\n  Constants.HOSTNAME = 'http://127.0.0.1'; //export const HOSTNAME = 'http://192.168.0.24';\n\n  Constants.PORT = 8000; //Messages\n\n  Constants.MSG_CONFIRMDELETEFLIGHT = 'Sei sicuro di voler rimuovere questo volo definitivamente?';\n  Constants.MSG_CONFIRMEDITPASSWORD = 'Sei sicuro di voler modificare la password?';\n  Constants.MSG_CONFIRMEDITUSERNAME = 'Sei sicuro di voler modificare il nome utente?';\n  Constants.MSG_CONFIRMLOGOUT = 'Sei sicuro di voler chiudere la sessione?'; //Urls\n\n  Constants.URL_HOME = Constants.HOSTNAME + ':' + Constants.PORT;\n  Constants.URL_AIRPORTSSEARCH = Constants.URL_HOME + '/airportsearch';\n  Constants.URL_COMPANIESSEARCH = Constants.URL_HOME + '/companieslist';\n  Constants.URL_FLIGHTSLIST = Constants.URL_HOME + '/profile/myFlights';\n  Constants.URL_FLIGHTEVENTS = Constants.URL_HOME + '/flightevents';\n  Constants.URL_FLIGHTSEARCH = Constants.URL_HOME + '/flightsearch';\n  Constants.URL_SENDEMAIL = Constants.URL_HOME + '/contacts/sendemail';\n})(Constants || (Constants = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvdmFsdWVzL2NvbnN0YW50cy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87O0FBQ1AsQ0FBQyxxQkFBcUI7QUFDbEJBLEVBQUFBLFNBQVMsQ0FBVEEsVUFBQUEsR0FBQUEsTUFBQUE7QUFDQUEsRUFBQUEsU0FBUyxDQUFUQSxtQkFBQUEsR0FBZ0NBLFNBQVMsQ0FBVEEsVUFBQUEsR0FBaENBLGVBQUFBO0FBQ0FBLEVBQUFBLFNBQVMsQ0FBVEEsV0FBQUEsR0FBQUEsT0FBQUE7QUFDQUEsRUFBQUEsU0FBUyxDQUFUQSxhQUFBQSxHQUFBQSxVQUFBQTtBQUNBQSxFQUFBQSxTQUFTLENBQVRBLFFBQUFBLEdBTGtCLGtCQUtsQkEsQ0FMa0IsQ0FNbEI7O0FBQ0FBLEVBQUFBLFNBQVMsQ0FBVEEsSUFBQUEsR0FQa0IsSUFPbEJBLENBUGtCLENBUWxCOztBQUNBQSxFQUFBQSxTQUFTLENBQVRBLHVCQUFBQSxHQUFBQSw0REFBQUE7QUFDQUEsRUFBQUEsU0FBUyxDQUFUQSx1QkFBQUEsR0FBQUEsNkNBQUFBO0FBQ0FBLEVBQUFBLFNBQVMsQ0FBVEEsdUJBQUFBLEdBQUFBLGdEQUFBQTtBQUNBQSxFQUFBQSxTQUFTLENBQVRBLGlCQUFBQSxHQVprQiwyQ0FZbEJBLENBWmtCLENBYWxCOztBQUNBQSxFQUFBQSxTQUFTLENBQVRBLFFBQUFBLEdBQXFCQSxTQUFTLENBQVRBLFFBQUFBLEdBQUFBLEdBQUFBLEdBQTJCQSxTQUFTLENBQXpEQSxJQUFBQTtBQUNBQSxFQUFBQSxTQUFTLENBQVRBLGtCQUFBQSxHQUErQkEsU0FBUyxDQUFUQSxRQUFBQSxHQUEvQkEsZ0JBQUFBO0FBQ0FBLEVBQUFBLFNBQVMsQ0FBVEEsbUJBQUFBLEdBQWdDQSxTQUFTLENBQVRBLFFBQUFBLEdBQWhDQSxnQkFBQUE7QUFDQUEsRUFBQUEsU0FBUyxDQUFUQSxlQUFBQSxHQUE0QkEsU0FBUyxDQUFUQSxRQUFBQSxHQUE1QkEsb0JBQUFBO0FBQ0FBLEVBQUFBLFNBQVMsQ0FBVEEsZ0JBQUFBLEdBQTZCQSxTQUFTLENBQVRBLFFBQUFBLEdBQTdCQSxlQUFBQTtBQUNBQSxFQUFBQSxTQUFTLENBQVRBLGdCQUFBQSxHQUE2QkEsU0FBUyxDQUFUQSxRQUFBQSxHQUE3QkEsZUFBQUE7QUFDQUEsRUFBQUEsU0FBUyxDQUFUQSxhQUFBQSxHQUEwQkEsU0FBUyxDQUFUQSxRQUFBQSxHQUExQkEscUJBQUFBO0FBcEJKLEdBcUJHQSxTQUFTLEtBQUtBLFNBQVMsR0FyQjFCLEVBcUJZLENBckJaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3ZhbHVlcy9jb25zdGFudHMudHM/OWY0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIENvbnN0YW50cztcclxuKGZ1bmN0aW9uIChDb25zdGFudHMpIHtcclxuICAgIENvbnN0YW50cy5GT0xERVJfSU1HID0gJy9pbWcnO1xyXG4gICAgQ29uc3RhbnRzLkZPTERFUl9GTElHSFRFVkVOVFMgPSBDb25zdGFudHMuRk9MREVSX0lNRyArICcvZmxpZ2h0ZXZlbnRzJztcclxuICAgIENvbnN0YW50cy5GT0xERVJfSlNPTiA9ICcvanNvbic7XHJcbiAgICBDb25zdGFudHMuRk9MREVSX1NDUklQVCA9ICcvc2NyaXB0cyc7XHJcbiAgICBDb25zdGFudHMuSE9TVE5BTUUgPSAnaHR0cDovLzEyNy4wLjAuMSc7XHJcbiAgICAvL2V4cG9ydCBjb25zdCBIT1NUTkFNRSA9ICdodHRwOi8vMTkyLjE2OC4wLjI0JztcclxuICAgIENvbnN0YW50cy5QT1JUID0gODAwMDtcclxuICAgIC8vTWVzc2FnZXNcclxuICAgIENvbnN0YW50cy5NU0dfQ09ORklSTURFTEVURUZMSUdIVCA9ICdTZWkgc2ljdXJvIGRpIHZvbGVyIHJpbXVvdmVyZSBxdWVzdG8gdm9sbyBkZWZpbml0aXZhbWVudGU/JztcclxuICAgIENvbnN0YW50cy5NU0dfQ09ORklSTUVESVRQQVNTV09SRCA9ICdTZWkgc2ljdXJvIGRpIHZvbGVyIG1vZGlmaWNhcmUgbGEgcGFzc3dvcmQ/JztcclxuICAgIENvbnN0YW50cy5NU0dfQ09ORklSTUVESVRVU0VSTkFNRSA9ICdTZWkgc2ljdXJvIGRpIHZvbGVyIG1vZGlmaWNhcmUgaWwgbm9tZSB1dGVudGU/JztcclxuICAgIENvbnN0YW50cy5NU0dfQ09ORklSTUxPR09VVCA9ICdTZWkgc2ljdXJvIGRpIHZvbGVyIGNoaXVkZXJlIGxhIHNlc3Npb25lPyc7XHJcbiAgICAvL1VybHNcclxuICAgIENvbnN0YW50cy5VUkxfSE9NRSA9IENvbnN0YW50cy5IT1NUTkFNRSArICc6JyArIENvbnN0YW50cy5QT1JUO1xyXG4gICAgQ29uc3RhbnRzLlVSTF9BSVJQT1JUU1NFQVJDSCA9IENvbnN0YW50cy5VUkxfSE9NRSArICcvYWlycG9ydHNlYXJjaCc7XHJcbiAgICBDb25zdGFudHMuVVJMX0NPTVBBTklFU1NFQVJDSCA9IENvbnN0YW50cy5VUkxfSE9NRSArICcvY29tcGFuaWVzbGlzdCc7XHJcbiAgICBDb25zdGFudHMuVVJMX0ZMSUdIVFNMSVNUID0gQ29uc3RhbnRzLlVSTF9IT01FICsgJy9wcm9maWxlL215RmxpZ2h0cyc7XHJcbiAgICBDb25zdGFudHMuVVJMX0ZMSUdIVEVWRU5UUyA9IENvbnN0YW50cy5VUkxfSE9NRSArICcvZmxpZ2h0ZXZlbnRzJztcclxuICAgIENvbnN0YW50cy5VUkxfRkxJR0hUU0VBUkNIID0gQ29uc3RhbnRzLlVSTF9IT01FICsgJy9mbGlnaHRzZWFyY2gnO1xyXG4gICAgQ29uc3RhbnRzLlVSTF9TRU5ERU1BSUwgPSBDb25zdGFudHMuVVJMX0hPTUUgKyAnL2NvbnRhY3RzL3NlbmRlbWFpbCc7XHJcbn0pKENvbnN0YW50cyB8fCAoQ29uc3RhbnRzID0ge30pKTtcclxuIl0sIm5hbWVzIjpbIkNvbnN0YW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/values/constants.ts\n");

/***/ }),

/***/ "./resources/js/welcome.ts":
/*!*********************************!*\
  !*** ./resources/js/welcome.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _classes_flight_flighteventslist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes/flight/flighteventslist */ \"./resources/js/classes/flight/flighteventslist.ts\");\n/* harmony import */ var _classes_flight_flightlocationlist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classes/flight/flightlocationlist */ \"./resources/js/classes/flight/flightlocationlist.ts\");\n\n\n$(function () {\n  var elements = {\n    'nav_buttons': $('button.nav-link'),\n    'flight_tab': {\n      'elem': {\n        'fb-oneway-div': $('.fb-oneway-div'),\n        'fb-roundtrip-div': $('.fb-roundtrip-div'),\n        'flight-loc': $('.flight-loc'),\n        'flight-type-radio': $('input[name=flight-type]')\n      },\n      'id': {\n        0: 'fb-from',\n        1: 'fb-to',\n        2: 'fb-company_name'\n      }\n    }\n  }; //console.log(elements);\n\n  loadCountries(elements);\n  loadCompanies(elements);\n  tabClickEvents(elements);\n  setInputDate(elements);\n}); //Set input dates checking radio button status\n\nfunction setInputDate(elements) {\n  elements['flight_tab']['elem']['flight-type-radio'].on('change', function () {\n    var value = elements['flight_tab']['elem']['flight-type-radio'].filter(':checked').val();\n    console.log(value);\n\n    if (value == 'oneway') {\n      elements['flight_tab']['elem']['fb-roundtrip-div'].css('display', 'none');\n      elements['flight_tab']['elem']['fb-oneway-div'].css('display', 'flex');\n    } //if(value == 'oneway'){\n    else if (value == 'roundtrip') {\n      elements['flight_tab']['elem']['fb-oneway-div'].css('display', 'none');\n      elements['flight_tab']['elem']['fb-roundtrip-div'].css('display', 'flex');\n    }\n  }); //elements['flight_tab']['elem']['flight-type-radio'].on('change',() => {\n} //Load countries list from server\n\n\nfunction loadCountries(elements) {\n  var fll = new _classes_flight_flightlocationlist__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n  var dataC = {\n    id_from_select: elements['flight_tab']['id'][0],\n    id_to_select: elements['flight_tab']['id'][1]\n  };\n  fll.get_countries(dataC).then(function (res) {\n    var fired = $('#' + fll.id_from_select);\n    var dataA = {\n      country: fired.val()\n    };\n    fll.get_country_airports(dataA);\n    fired = $('#' + fll.id_to_select);\n    dataA = {\n      country: fired.val()\n    };\n    fll.get_country_airports(dataA);\n    onChangeSelect(elements);\n  })[\"catch\"](function (err) {});\n} //Get and set the companies name list in the proper select element\n\n\nfunction loadCompanies(elements) {\n  var fll = new _classes_flight_flightlocationlist__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n  var dataCn = {\n    id_companies_select: elements['flight_tab']['id'][2]\n  };\n  fll.get_flight_companies(dataCn).then(function (res) {})[\"catch\"](function (err) {});\n} //When select option change\n\n\nfunction onChangeSelect(elements) {\n  elements['flight_tab']['elem']['flight-loc'].on('change', function (event) {\n    var fired = $(event.currentTarget);\n    var fired_id = fired.attr('id');\n\n    if (fired_id == elements['flight_tab']['id'][0]) {\n      //Country select from\n      var dataA = {\n        country: fired.val(),\n        id_from_select: fired_id\n      };\n      var fll = new _classes_flight_flightlocationlist__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n      fll.get_country_airports(dataA);\n    } //if(fired_id == elements['flight_tab']['id'][0]){\n    else if (fired_id == elements['flight_tab']['id'][1]) {\n      //Country select to\n      var dataA = {\n        country: fired.val(),\n        id_to_select: fired_id\n      };\n      var fll = new _classes_flight_flightlocationlist__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n      fll.get_country_airports(dataA);\n    } //else if(fired_id == elements['flight_tab']['id'][1]){\n\n  });\n} //When a Bootstrap tab is clicked\n\n\nfunction tabClickEvents(elements) {\n  elements['nav_buttons'].on('click', function (event) {\n    var clickbutton = event.currentTarget;\n    var cb_dbt = clickbutton.getAttribute('data-bs-target');\n    var cb_id = clickbutton.getAttribute('id');\n    $('' + cb_dbt).css('display', 'block');\n    $('div[role=tabpanel]:not(' + cb_dbt + ')').css('display', 'none');\n\n    if (cb_id == 'events-tab') {\n      //User want see flight events list\n      var fel_1 = new _classes_flight_flighteventslist__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n      fel_1.flight_events_request().then(function (response) {\n        //console.log(fel.html);\n        if (fel_1.errno == 0) {\n          //No errors Happened\n          $('#events').html(fel_1.html);\n        }\n      })[\"catch\"](function (err) {});\n    } //if(cb_id == 'events_tab'){\n\n  }); //elements['nav_buttons'].on('click',(event)=>{\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/welcome.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/welcome.ts");
/******/ 	
/******/ })()
;